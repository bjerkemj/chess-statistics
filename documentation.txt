#Tinus Alsos og Johan Bjerkem

Before running any of the scripts, make sure to create a virtual environment and download the requirements from requirements.txt. If you experience an issue with graphviz or pylatex, using homebrew to install (if you are using mac) could help. On windows, if you still experience trouble with pylatex or graphviz when installing with conda or pip, it might help to add the path to the downloaded libraries to system environment variables path.

This programs contains the four following files with classes:

chessGame.py, contains
    -ChessGame, a class that loads and manages a single chessgame from png or xlsx format. We have chose NOT to include set functions for a single game since we only load in games - we do not create them from scratch. This corresponds to task 1-3 and 5. Includes both reading from and loading to png and xlsx.

chessDatabase.py, contains
    ChessDatabase, a class that manages a database of ChessGame objects in the way of a list. It can load an entire database from a pgn file and save a database to pgn file. The ChessDatabase primarily consists of filtering functions that return the filtered games (NOTE: But does not change the database). Rather, if you wish to have a database containing only games by some filter, you simply input the filtered games into a new ChessDatabase. The ChessDatabase class also contains various methods for getting statistics. This corresponds to task 4 and some functionality needed for later tasks, like task 7, 8, 11 and 12.

chessOpeningTree.py, contains
    Tree, a base class for chess trees with shared functions between the other two Tree instances.

    ChessOpeningTree, a class that inherits from the base Tree class and creates a chess tree from a given database with given opening(s)

    ChessTree, a class that inherits from the base Tree class and adds new ChessTrees as children based on moves so far "played"

    The only real difference between a ChessOpeningTree and a ChessTree is that the ChessOpeningTree filters trees based off openings and names the root, while the ChessTree is filtered based on the move sequence that has been played so far.

    A Tree may or may not have children. If a tree has children, the children will also be trees.

    This file covers task 9 and 10.

pdfCreator.py, contains
    PDFCreator, a class containing functionality to create a latex pdf file with tables, drawing, text, titles, sections and graphs of chesstrees etc. The visualization of trees is done by turning a Tree object into a .dot file and converting the .dot file into a png using graphviz.The PDFCreator does all the plotting and visualization by using the other classes and extracting info. The general strategy for this class is to pylatex for latex commands and create plots/visualizations in png format and adding to the pdf. Since LaTeX is a very specific markup language it's difficult the create dynamic functions that can create different reports. We tried our best to split various elements of the report, such as tables and sections, into their own functions. This class covers task 6, 7, 8, 11 and 12.

All clases except pdfCreator have testing scripts in the tests folder. Run $ python test_main.py to run all tests while being the the chess-statistics folder. The PDFCreator is tested using ad hoc testing. A complete example of the finished product is generated by running the main script in pdfCreator.py. This is to be considered as a test for the pdfCreator, as well as proof that all functionality is met. The result of this script is a pdf file called 'CompleteExample.pdf', is already part of the delivery.


Some things to note:
We deviate a bit from the portable game notation in displaying the moves performed in each edge of the tree. This is explained in 'CompleteExample.pdf'. The reason for this is to avoid non ascii letters in the name of the trees, as these are used to identify nodes/edges in the tree.

We have included a visualization of a tree containing all openings to depth 15 in 'Depth15TreeAllOpenings.pdf'. The quality is quite poor due to the size. Larger trees can be created (as is done in the test_chessOpeningTree.py), but the graph is too large to be of usable quality.

We found an interesting result: There are 2599 leaves in the tree containing all the games, as there is two 34-move games that are equivalent (with respect to which color makes what move in what order, but the tags are different).